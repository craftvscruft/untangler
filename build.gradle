plugins {
    id 'java'
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.9.24'
    id 'com.diffplug.spotless' version "6.20.0"
    id 'jacoco'
}

group 'ai.mender'
version '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}


dependencies {
    implementation project(':antlr-engine')
    implementation "org.antlr:antlr4-runtime:${property('antlr.version')}"
    implementation 'info.picocli:picocli:4.7.4'
    implementation 'com.ibm.icu:icu4j:73.2'
    implementation "com.fasterxml.jackson.core:jackson-core:${property('jackson.version')}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${property('jackson.version')}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${property('jackson.version')}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${property('jackson.version')}"
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation 'org.eclipse.lsp4j:org.eclipse.lsp4j:0.21.0'
    implementation "com.google.guava:guava:32.1.2-jre"
    implementation 'ch.qos.logback:logback-classic:1.4.11'
    annotationProcessor 'info.picocli:picocli-codegen:4.7.3'


    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.2'
    testImplementation 'com.approvaltests:approvaltests:18.7.1'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

application {
    mainClass = 'ai.mender.Main'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

check {
    // Run formatting whenever we run check so we don't get behind
    dependsOn spotlessApply
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/antlrgen/*'
            ])
        }))
    }
}

jacocoTestCoverageVerification {

}

sourceCompatibility = JavaVersion.VERSION_16 // TO THE MOON
targetCompatibility = JavaVersion.VERSION_16 // TO THE MOON

graalvmNative {
    binaries.all {
        resources.autodetect()
    }
    binaries.main {

        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(20)
            vendor = JvmVendorSpec.matching("Oracle")
        }
    }
    toolchainDetection = false
}

sourceSets.main.java.srcDirs = ['src/main/java']


spotless {
    // optional: limit format enforcement to just the files changed by this feature branch
    ratchetFrom 'origin/main'

    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    java {
        target(['src/main/java', 'src/test/java']) // don't format generated code.

        // fix formatting of type annotations
        formatAnnotations()
        importOrder()
        // apply a specific flavor of google-java-format
        googleJavaFormat('1.17.0').aosp().reflowLongStrings()
    }
}

